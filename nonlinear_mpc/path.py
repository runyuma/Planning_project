import numpy as np

class PATH:
    def __init__(self, cx, cy, cyaw, interp_num):
        #cx,cy,cyaw list of x,y,yaw
        ck = self.ck(cx, cy)
        self.cx, self.cy,self.cyaw,self.ck = self.path_interpolate(cx,cy,cyaw,ck,interp_num)
        self.length = len(self.cx)
        self.ind_old = 0

    def nearest_index(self, robo_state, param):
        """
        calc index of the nearest node in N steps
        :param robo_state: current information
        :return: nearest index, lateral distance to ref point
        """

        dx = [robo_state.x - x for x in self.cx[self.ind_old: (self.ind_old + param["N_IND"])]]
        dy = [robo_state.y - y for y in self.cy[self.ind_old: (self.ind_old + param["N_IND"])]]
        dist = np.hypot(dx, dy)
        # return x2+y2

        ind_in_N = int(np.argmin(dist))
        ind = self.ind_old + ind_in_N
        self.ind_old = ind

        rear_axle_vec_rot_90 = np.array([[np.cos(robo_state.yaw + np.pi / 2.0)],
                                         [np.sin(robo_state.yaw + np.pi / 2.0)]])

        vec_target_2_rear = np.array([[dx[ind_in_N]],
                                      [dy[ind_in_N]]])

        er = np.dot(vec_target_2_rear.T, rear_axle_vec_rot_90)
        er = er[0][0]

        theta = robo_state.yaw
        theta_p = self.cyaw[ind]
        theta_e = pi_2_pi(theta - theta_p)

        return ind, er,theta_e
    def ck(self,cx, cy):
        x = cx
        y = cy
        dx = [x[i+1]-x[i] for i in range(len(x)-1)]
        dy = [y[i+1]-y[i] for i in range(len(y)-1)]
        ddx = [dx[i+1]-dx[i] for i in range(len(dx)-1)]
        ddy = [dy[i+1]-dy[i] for i in range(len(dy)-1)]
        cri = [dx[i]*dx[i+1]+dy[i]*dy[i+1] for i in range(len(dx)-1)]
        k = [(ddy[i]*dx[i] - ddx[i]*dy[i])/(dx[i]**2+dy[i]**2) for i in range(len(dx)-1)]
        for i in range(len(k)-1):
            if cri[i] < 0:
                k[i] = k[i-1]
        k = [0]+k+[0]
        #smooth curvature
        ck = k
        # for i in range(1,len(k)):
        #     curs = k[max(0,i-3):min(i+3,len(k)-1)]
        #     ck[i] = sum(curs)/len(curs)

        return ck
    def path_interpolate(self,cx,cy,cyaw,ck,interp_num):
        cx_interp = []
        cy_interp = []
        cyaw_interp = []
        ck_interp = []
        for i in range(len(cx) - 1):
            cx_interp.append(cx[i])
            cy_interp.append(cy[i])
            cyaw_interp.append(cyaw[i])
            ck_interp.append(ck[i])
            for j in range(interp_num):
                cx_interp.append(cx[i] + (cx[i + 1] - cx[i]) * (j + 1) / (interp_num + 1))
                cy_interp.append(cy[i] + (cy[i + 1] - cy[i]) * (j + 1) / (interp_num + 1))
                cyaw_interp.append(cyaw[i] + pi_2_pi(cyaw[i + 1] - cyaw[i]) * (j + 1) / (interp_num + 1))
                ck_interp.append(ck[i] + (ck[i + 1] - ck[i]) * (j + 1) / (interp_num + 1))
        cx_interp.append(cx[-1])
        cy_interp.append(cy[-1])
        cyaw_interp.append(cyaw[-1])
        ck_interp.append(ck[-1])
        return cx_interp, cy_interp, cyaw_interp,ck_interp
def pi_2_pi(angle):
    if angle > np.pi:
        return angle - 2.0 * np.pi

    if angle < -np.pi:
        return angle + 2.0 * np.pi
    return angle

x = [10.0, 9.8, 9.600000000000001, 9.400000000000002, 9.200000000000003, 9.000000000000004, 8.800000000000004, 8.600000000000005, 8.400000000000006, 8.200000000000006, 8.000000000000007, 7.800000000000007, 7.600000000000007, 7.400000000000007, 7.200000000000006, 7.000000000000006, 6.800000000000006, 6.600000000000006, 6.400000000000006, 6.2000000000000055, 6.000000000000005, 5.800000000000005, 5.6241818277327384, 5.473370293738478, 5.348272895662259, 5.249476499191304, 5.177444584909557, 5.1325150739850605, 5.114898742890473, 5.1246782345937, 5.161807670857405, 5.226112867466214, 5.319140046985983, 5.44039024109063, 5.589213102143025, 5.764810391453729, 5.966240260780494, 6.192422304103922, 6.442143352583149, 6.714063981609255, 7.006725695054627, 7.318558748184231, 7.647890567269183, 7.992954720742464, 8.351900393778362, 8.722802315476976, 9.10367108540753, 9.49246384412217, 9.887095230407, 10.28544856649913, 10.68538721127577, 11.084766020520467, 11.483240364833511, 11.880411633613319, 12.275882519779422, 12.669257417215407, 13.06014281651031, 13.448147698602586, 13.832883925932874, 14.213966630714289, 14.591014599931801, 14.963650656685617, 15.34219497449026, 15.72594716411044, 16.11419720061648, 16.50622673708471, 16.901310433695336, 17.298717299768725, 17.697712046256974, 18.09755644618841, 18.49751070054788, 18.896834807065677, 19.29678913238025, 19.69522844816971, 20.090015652143403, 20.47903323078171, 20.86019461700787, 21.2314553818729, 21.59082420022494, 21.936373531546636, 22.26624995867197, 22.57868412892889, 22.872000244386637, 23.144625050305052, 23.39509627357471, 23.62207046588672, 23.82433020956394, 24.00079064740381, 24.15050530150876, 24.272671149893874, 24.366632933642485, 24.43188667150745, 24.50673322723073, 24.59112819149233, 24.68502148953681, 24.788357410884537, 24.901074642386853, 25.023106304605495, 25.15437999149473, 25.294817813362624, 25.44433644308597, 25.60284716555145, 25.771565738226933, 25.95036020008053, 26.139090709355006, 26.337609652943172, 26.545761761841565, 26.763384232592074, 26.99030685461653, 27.22635214334471, 27.471335479031556, 27.725065251155126, 27.959958406866175, 28.175183656168922, 28.369979314049413, 28.5436559960889, 28.69559905820445, 28.825270771882508, 28.932212227207238, 29.016044956948825, 29.076472275964004, 29.05526484658267, 29.065313266146163, 29.106556137772987, 29.178741463257243, 29.28142818280372, 29.41398886994878, 29.57561356520089, 29.76531472497675, 29.98193325559463, 30.224145595456463, 30.490471802145954, 30.779284595029605, 31.088819298109485, 31.41718462237585, 31.762374221778373, 32.12227895220775, 32.494699758584076, 32.87736111131054, 33.26792490999433, 33.664004769481515, 34.06318060091688, 34.4630133987368, 34.861060143245176, 35.254888727716136, 35.64209281881737, 36.020306559555316, 36.38721902490584, 36.74058834180479, 37.07825538722402, 37.398156980636124, 37.698338490260554, 37.98759203093013, 37.700415057445014, 37.435852300451344, 37.195520265722806, 36.980887406817104, 36.79326515267303, 36.63379989464416, 36.5034659819293, 36.4030597681982, 36.33319474578838, 36.294297797203605, 36.28660658681765, 36.31016810872045, 36.364838399579355, 36.45028341826995, 36.56598108690184, 36.71122448076851, 36.885126147730254, 37.08662353063847, 37.31448545966956, 37.56731967489977, 37.84358133315708, 38.141582447172624, 38.459502199357225, 38.79539806718496, 39.14721769220647, 39.512811420171055, 39.88994543563621, 40.276315410810746, 40.66956058523559, 41.06727819027405, 41.46703813027644, 41.86639783071545, 42.26291716256883, 42.65417335175983, 43.03777578255699, 43.41492086464189, 43.79969255420181, 44.19179824624339, 44.588842134485006, 44.98839823975619]
y = [7.0, 7.346410161513775, 7.692820323027551, 8.039230484541326, 8.385640646055101, 8.732050807568877, 9.078460969082652, 9.424871130596427, 9.771281292110203, 10.117691453623978, 10.464101615137753, 10.810511776651529, 11.156921938165304, 11.50333209967908, 11.849742261192855, 12.19615242270663, 12.542562584220406, 12.888972745734181, 13.235382907247956, 13.581793068761732, 13.928203230275507, 14.274613391789282, 14.633901535624558, 15.00438214404327, 15.384317192432544, 15.771924302847657, 16.165385105628452, 16.56285376986261, 16.962465662677083, 17.362346096734598, 17.76061912489837, 18.15541634080687, 18.544448401016048, 18.925628660774585, 19.29691258990185, 19.656308739000213, 20.001889420958857, 20.33180105045688, 20.644274086007844, 20.937632521219868, 21.210302874363034, 21.46082262802703, 21.6878480736013, 21.890161518502445, 22.066677817491538, 22.2164501930495, 22.33867531359183, 22.432697602284776, 22.498012753351837, 22.534270437010214, 22.541276178528797, 22.51899240132904, 22.48408972343336, 22.436603059454534, 22.37657991229448, 22.304080325625122, 22.21917682382417, 22.12195433942596, 22.01251012815987, 21.89095367166133, 21.757406567952753, 21.612002409803935, 21.48275768280195, 21.369911517773104, 21.273672704641097, 21.194219306120285, 21.131698328260992, 21.086225448456357, 21.057884801414037, 21.046728823488706, 21.052778155663418, 21.076021605359294, 21.06997696623321, 21.034676659814895, 20.970310025767173, 20.87722230632798, 20.75591279454035, 20.60703215620268, 20.431378939903464, 20.229895293859602, 20.003661912531772, 19.753892240121633, 19.481925962041466, 19.189221819265953, 18.87734978410762, 18.5479826393826, 18.20288700613346, 17.84391386803346, 17.472988643296404, 17.092100857343183, 16.703293471617577, 16.308651925788137, 15.915716825426307, 15.524721313933805, 15.1358973838802, 14.749475739352857, 14.36568565907139, 13.984754860347849, 13.60690936397333, 13.232373360111215, 12.861369075276587, 12.494116640480748, 12.131440416784807, 11.773624066668603, 11.420947451525215, 11.073686412771027, 10.732112556099953, 10.396493039050595, 10.067090362052449, 9.744162163114618, 9.427961016317607, 9.118734234265792, 8.794967025611017, 8.45780520680205, 8.10844199799078, 7.748113800210265, 7.3780958197350595, 6.999697555109287, 6.614258162813911, 6.223141717974175, 5.827732386879627, 6.227067774727294, 6.626839630055662, 7.024605305533554, 7.417934411795908, 7.804423667373853, 8.181711582992733, 8.547492890515512, 8.899532628369213, 9.235679797391, 9.553880503655247, 9.85219050797759, 10.128787105417175, 10.38198026219212, 10.610222941960506, 10.812120558372232, 10.986439496135656, 11.132114648534468, 11.248255925339748, 11.334153691353198, 11.389283102351524, 11.413307311938832, 11.406079529712926, 11.367643918169811, 11.298235322866288, 11.198277837489343, 11.068382212599909, 10.909342123883853, 10.722129322711552, 10.507887698636633, 10.267926290112658, 10.003711286132933, 9.727495646216532, 10.005790261594445, 10.305665326680417, 10.62528857385066, 10.962707072048932, 11.31585915939701, 11.682587040161751, 12.060649969109889, 12.44773794269289, 12.841485813407242, 13.239487741090016, 13.639311892850774, 14.038515301821732, 14.434658793937675, 14.825321891541446, 15.208117602752473, 15.580707006233705, 15.940813542242616, 16.28623692264636, 16.614866574909573, 16.924694537910554, 17.213827730791156, 17.48049951987636, 17.723080512988542, 17.940088515201968, 18.130197585206886, 18.292246136947927, 18.425244037034872, 18.528378654559937, 18.601019826356584, 18.64272370736153, 18.653235482553967, 18.63249092390163, 18.580616782800742, 18.497930015611846, 18.384935847023748, 18.25174796935321, 18.14280186358703, 18.06424211997105, 18.01654874665372, 18.000013155072576]
yaw = [2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0943951023931953, 2.0258888597460536, 1.957382617098912, 1.8888763744517703, 1.8203701318046286, 1.751863889157487, 1.6833576465103453, 1.6148514038632036, 1.546345161216062, 1.4778389185689202, 1.4093326759217786, 1.3360791271547894, 1.2628255783878002, 1.189572029620811, 1.1163184808538218, 1.0430649320868326, 0.9698113833198433, 0.896557834552854, 0.8233042857858647, 0.7500507370188754, 0.6767971882518861, 0.6035436394848968, 0.5302900907179074, 0.4570365419509182, 0.38378299318392894, 0.3105294444169397, 0.23727589564995044, 0.1640223468829612, 0.09076879811597192, 0.01751524934898266, -0.05573829941800661, -0.08736780066086725, -0.11899730190372788, -0.15062680314658852, -0.18225630438944918, -0.2138858056323098, -0.24551530687517042, -0.27714480811803105, -0.3087743093608917, -0.3404038106037523, -0.3720333118466129, -0.32901584308752413, -0.28599837432843533, -0.24298090556934654, -0.19996343681025774, -0.15694596805116895, -0.11392849929208015, -0.07091103053299136, -0.027893561773902557, 0.015123906985186245, 0.058141375744275046, -0.015112173022714219, -0.08836572178970348, -0.16161927055669273, -0.23487281932368198, -0.30812636809067123, -0.3813799168576605, -0.45463346562464974, -0.527887014391639, -0.6011405631586283, -0.6743941119256176, -0.7476476606926069, -0.8209012094595962, -0.8941547582265855, -0.9674083069935748, -1.040661855760564, -1.1139154045275532, -1.1871689532945424, -1.2604225020615316, -1.3336760508285208, -1.40692959959551, -1.3825704630946363, -1.3582113265937625, -1.3338521900928888, -1.309493053592015, -1.2851339170911413, -1.2607747805902676, -1.2364156440893939, -1.2120565075885201, -1.1876973710876464, -1.1633382345867727, -1.1353706114194053, -1.107402988252038, -1.0794353650846706, -1.0514677419173033, -1.023500118749936, -0.9955324955825685, -0.9675648724152011, -0.9395972492478336, -0.9116296260804662, -0.8836620029130987, -0.9431603851063853, -1.002658767299672, -1.0621571494929587, -1.1216555316862453, -1.181153913879532, -1.2406522960728186, -1.3001506782661052, -1.3596490604593918, -1.4191474426526784, -1.478645824845965, -1.5568328886564442, -1.6350199524669233, -1.7132070162774025, -1.7913940800878816, -1.8695811438983607, -1.9477682077088398, -2.0259552715193188, -2.104142335329798, -2.1823293991402775, -2.2605164629507564, -2.3387035267612353, -2.4168905905717146, -2.495077654382194, -2.573264718192673, -2.651451782003152, -2.729638845813631, -2.8078259096241105, -2.8860129734345894, -2.9642000372450683, -3.0423871010555477, -3.120574164866027, 3.0844240785030803, 3.0062370146926014, 2.928049950882122, 2.8498628870716427, 2.771675823261164, 2.693488759450685, 2.6153016956402055, 2.537114631829726, 2.458927568019247, 2.3807405042087675, 2.4109946072799673, 2.332807543469488, 2.2546204796590086, 2.17643341584853, 2.0982463520380508, 2.0200592882275714, 1.941872224417093, 1.8636851606066136, 1.7854980967961342, 1.707311032985655, 1.6291239691751755, 1.550936905364697, 1.4727498415542177, 1.3945627777437384, 1.31637571393326, 1.2381886501227806, 1.1600015863123012, 1.0818145225018219, 1.0036274586913425, 0.925440394880864, 0.8472533310703847, 0.7690662672599053, 0.690879203449426, 0.6126921396389475, 0.5345050758284682, 0.4563180120179888, 0.37813094820751036, 0.299943884397031, 0.22175682058655166, 0.1435697567760723, 0.06538269296559296, -0.012804370844886392, -0.09099143465536574, -0.1691784984658451, -0.24736556227632445, -0.3255526260868038, -0.31501602610693435, -0.236828962296455, -0.15864189848597565, -0.08045483467549719, -0.0022677708650178374]
test_path = PATH(x,y,yaw,3)
test_param ={"N":6,   # Predict Horizon
        "Tf":2.4,  # dim of state space
        "dt":0.4, #time step
        "d_dist":0.1,#todo:distance between nodes
        "N_IND":10, # search index number
        "lr":1.25,
        "L":2.5,    # lr+lf
        "disc_offset":0.5,
        "radius":1.25,
        "start_vel":0.5,
        "approximate_acc" :0.5,
        }

def get_velprofile(path, target_speed,dv):
    """
        design appropriate speed strategy
        :param path:  reference path
        :param target_speed: target speed [m/s]
        :return: paths,speed profiles
        """
    cx = path.cx
    cy = path.cy
    cyaw = path.cyaw
    speed_profile = [target_speed] * len(cx)
    direction = [1.0 for i in range(len(cx))]  # forward

    # Set stop point
    dx = [cx[i + 1] - cx[i] for i in range(len(cx) - 1)]
    dy = [cy[i + 1] - cy[i] for i in range(len(cy) - 1)]
    dyaw = [cyaw[i + 1] - cyaw[i] for i in range(len(cyaw) - 1)]
    # decide the direction of velocity
    for i in range(len(cx) - 1):
        move_direction = np.arctan2(dy[i], dx[i])
        if dx != 0.0 and dy != 0.0:
            dangle = move_direction - cyaw[i]
            if abs(dangle)>=np.pi:
                dangle += -2* np.sign(dangle)*np.pi
            if abs(dangle) >= np.pi / 4.0:
                direction[i] = -1.0
            else:
                direction[i] = 1.0
    for i in range(len(direction)):
        if direction[i] != 1.0:
            speed_profile[i] = - target_speed
        else:
            speed_profile[i] = target_speed
    # if change direction, set vel = 0
    split = [0]
    for i in range(len(cx)-1):
        if direction[i] != direction[i+1]:
            split.append(i)
            speed_profile[i] = 0.0
            if i != 0:
                for j in range(int(target_speed/dv)):
                    if direction[i] > 0:
                        speed_profile[i - j] = j*dv
                        speed_profile[i + j] = - dv * j
                    else:
                        speed_profile[i - j] = -j * dv
                        speed_profile[i + j] = dv * j
    for j in range(int(target_speed/dv)):
        if direction[1] > 0:
            speed_profile[j] = j * dv
        else:
            speed_profile[j] = -j * dv
    for j in range(int(target_speed / dv)):
        if direction[len(cx)-2] > 0:
            speed_profile[len(cx) - j-1] = j * dv
        else:
            speed_profile[len(cx) - j-1] = -j * dv

    speed_profile[0] = 0.0
    speed_profile[-1] = 0.0

    return speed_profile

def get_reftraj(robot_state,ref_path,vel_profile,param):

    Nx = 5
    N = param["N"]
    dt = param["dt"]
    d_dist = param["d_dist"]
    z_ref = np.zeros((Nx, N + 1))
    length = ref_path.length
    start_vel = param["start_vel"]

    ind, err,theta_err = ref_path.nearest_index(robot_state,param)

    z_ref[0, 0] = ref_path.cx[ind]
    z_ref[1, 0] = ref_path.cy[ind]
    z_ref[2, 0] = vel_profile[ind]
    z_ref[3, 0] = ref_path.cyaw[ind]
    z_ref[4, 0] = ref_path.ck[ind]*np.sign(vel_profile[ind])*param["L"] # todo reference curvature

    dist_move = 0.0
    approx_vel = robot_state.v
    approx_acc = param["approximate_acc"]
    for i in range(1, N + 1):

        dist_move += max(abs(approx_vel) * dt,start_vel*dt)
        ind_move = int(round(dist_move / d_dist))
        index = min(ind + ind_move, length - 1)

        z_ref[0, i] = ref_path.cx[index]
        z_ref[1, i] = ref_path.cy[index]
        z_ref[2, i] = vel_profile[index]
        z_ref[3, i] = ref_path.cyaw[index]
        z_ref[4, i] = ref_path.ck[index]*np.sign(vel_profile[index])*param["L"] # todo reference curvature
        if abs(vel_profile[index]-approx_vel) <= approx_acc*dt:
            approx_vel = vel_profile[index]
        else:
            approx_vel += np.sign(vel_profile[index]-approx_vel) * approx_acc * dt
    if z_ref[2, 0] != 0:
        direction = np.sign(z_ref[2, 0])
    else:
        indx = min(ind+1, length - 1)
        direction = np.sign(vel_profile[indx])
    for i in range(1, N + 1):
        d_angle = z_ref[3, i] - robot_state.yaw
        d_angle = pi_2_pi(d_angle)
        z_ref[3, i] = robot_state.yaw + d_angle

    return z_ref, ind, direction
if __name__ == '__main__':
    import matplotlib.pyplot as plt
    plt.plot(test_path.ck,"bo")
    plt.show()